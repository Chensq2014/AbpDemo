using Akso.EGMP.Auditing.Application;
using Akso.EGMP.Auditing.EntityFramework;
using Akso.EGMP.Authentication.Application;
using Akso.EGMP.BasicObject.Application;
using Akso.EGMP.Checklist;
using Akso.EGMP.EntityFramework;
using Akso.EGMP.Environments;
using Akso.EGMP.HttpApi.Filters;
using Akso.EGMP.Lifecycle.Application;
using Akso.EGMP.Logging;
using Akso.EGMP.MultiTenancy;
using Akso.EGMP.Organization.Application;
using Akso.EGMP.Oss;
using Akso.EGMP.Oss.Aliyun;
using Akso.EGMP.Oss.AmazonS3;
using Akso.EGMP.Oss.Interfaces;
using Akso.EGMP.Personal.Application;
using Akso.EGMP.Power.Application;
using Akso.EGMP.RabbitMQ;
using Akso.EGMP.Translate.Application;
using Akso.EGMP.Workflow;
using Microsoft.AspNetCore.Http.Features;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.OpenApi.Models;
using Newtonsoft.Json;
using System.Reflection;
using System.Text.Encodings.Web;
using System.Text.Unicode;
using Volo.Abp;
using Volo.Abp.AspNetCore;
using Volo.Abp.AspNetCore.Mvc.Uow;
using Volo.Abp.Autofac;
using Volo.Abp.AutoMapper;
using Volo.Abp.FluentValidation;
using Volo.Abp.Json;
using Volo.Abp.Modularity;
using Volo.Abp.MultiTenancy;
using Volo.Abp.ObjectMapping;
using Volo.Abp.Threading;

namespace Akso.EGMP.HttpApi
{
    [DependsOn(
        typeof(AbpAspNetCoreModule),
        typeof(AbpAutofacModule),
        typeof(AksoModule),
        typeof(OssAmazonS3Module),
        typeof(OssAliyunModule),
        typeof(MultiTenancyModule),
        typeof(LoggingModule),
        typeof(RabbitMQModule),
        typeof(PersonalApplicationModule),
        typeof(OrganizationApplicationModule),
        typeof(ChecklistApplicationModule),
        typeof(AbpAutoMapperModule),
        typeof(EntityFrameworkModule),
        typeof(TranslateApplicationModule),
        typeof(PowerApplicationModule),
        typeof(BasicObjectApplicationModule),
        typeof(WorkflowHttpApiModule),
        typeof(LifecycleApplicationModule),
        typeof(AbpObjectMappingModule),
        typeof(AuthenticationApplicationModule),
        typeof(AuditingApplicationModule),
        typeof(AuditingEntityFrameworkModule),
        typeof(AbpFluentValidationModule)
    )]
    public class HttpApiModule : AbpModule
    {
        string policyName = "AllowOrigins";

        /// <summary>
        /// 配置服务 前执行
        /// </summary>
        /// <param name="context"></param>
        /// <returns></returns>
        public override async Task PreConfigureServicesAsync(ServiceConfigurationContext context)
        {
            await base.PreConfigureServicesAsync(context);

            //abp序列化使用 NewtonsoftJson, 默认是 TextJson
            PreConfigure<AbpJsonOptions>(options =>
            {
                options.UseHybridSerializer = false;
            });
            ThreadPool.SetMinThreads(200, 200); //设置全局最小线程池

        }
        /// <summary>
        /// 配置服务
        /// </summary>
        /// <param name="context"></param>
        /// <returns></returns>
        public override async Task ConfigureServicesAsync(ServiceConfigurationContext context)
        {
            await base.ConfigureServicesAsync(context);

            context.Services.AddControllers(option =>
            {
                option.Filters.Add<AuthenticationFilterAttribute>();
                option.Filters.Add<UnifyResultFilterAttribute>();
                option.Filters.Add<AbpUowActionFilter>();
                option.Filters.Add<ExceptionFilterAttribute>();

            }).AddNewtonsoftJson(options =>
            {
                options.SerializerSettings.DateFormatString = "yyyy-MM-dd HH:mm:ss";
                //options.SerializerSettings.ContractResolver = new DefaultContractResolver() { NamingStrategy = new DefaultNamingStrategy() };  //原样输出
                //options.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver(); //小驼峰，默认
                //options.SerializerSettings.NullValueHandling = NullValueHandling.Ignore;
                options.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;
                options.SerializerSettings.MaxDepth = 64;
            }).AddJsonOptions(options =>
            {
                options.JsonSerializerOptions.Encoder = JavaScriptEncoder.Create(UnicodeRanges.All);
            })
            .AddControllersAsServices();


            context.Services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();
            context.Services.AddScoped<IMemoryCache, MemoryCache>();

            //解决HTTP超时，异步任务会关闭问题
            context.Services.AddSingleton<ICancellationTokenProvider>(NullCancellationTokenProvider.Instance);

            #region Oss存储服务注册
            if (EgmpEnvironment.Instance.FileOOSPlatfrom == (int)OSSType.Aliyun)
            {
                context.Services.AddTransient<IStorageProvider, AliyunStorageService>();
            }
            else
            {
                context.Services.AddTransient<IStorageProvider, AmazonS3StorageService>();
            }
            #endregion

            SwaggerGenConfigService(context);


            //启用IHttpClientFactory
            context.Services.AddHttpClient();

            #region 跨域
            context.Services.AddCors(options =>
                            options.AddPolicy(policyName,
                            builder =>
                            {
                                builder.AllowAnyHeader()
                                    .AllowAnyMethod()
                                    .AllowAnyOrigin()  //允许所有
                                    .SetPreflightMaxAge(TimeSpan.FromSeconds(2520));
                            })
                        );

            #endregion

        }

        #region Swagger配置
        /// <summary>
        /// Swagger配置
        /// </summary>
        /// <param name="context"></param>
        public virtual void SwaggerGenConfigService(ServiceConfigurationContext context)
        {
            context.Services.AddSwaggerGen(s =>
            {
                s.SwaggerDoc("v1.0", new OpenApiInfo
                {
                    Title = "接口文档",
                    Description = "接口文档",
                    Version = "v1.0"
                });

                s.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme()
                {
                    Scheme = "Bearer",
                    BearerFormat = "JWT",
                    In = ParameterLocation.Header,
                    Name = "Authorization",
                    Type = SecuritySchemeType.ApiKey,
                    Description = "Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\""
                });
                s.AddSecurityRequirement(new OpenApiSecurityRequirement()
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id = "Bearer"
                            }
                        },
                        new string[] {}
                    }
                });

                foreach (var item in XmlCommentsFilePath())
                {
                    s.IncludeXmlComments(item);
                }

                s.DocumentFilter<SwaggerEnumFilter>();

                s.CustomSchemaIds(x => x.FullName);

                s.ResolveConflictingActions(apiDescriptions => apiDescriptions.First());
            });

            //使用 Newtonsoft 序列化JSON
            context.Services.AddSwaggerGenNewtonsoftSupport();
            //AutoMapper
            context.Services.AddAutoMapper(Assembly.GetExecutingAssembly());
        }

        /// <summary>
        /// Get Swagger Path
        /// </summary>
        private List<string> XmlCommentsFilePath()
        {
            var basePath = AppContext.BaseDirectory;
            DirectoryInfo d = new DirectoryInfo(basePath);
            FileInfo[] files = d.GetFiles("*.xml");
            var xmls = files.Select(a => Path.Combine(basePath, a.FullName)).ToList();
            return xmls;
        }
        #endregion

        /// <summary>
        /// 配置服务 后执行
        /// </summary>
        /// <param name="context"></param>
        /// <returns></returns>
        public override async Task PostConfigureServicesAsync(ServiceConfigurationContext context)
        {
            await base.PostConfigureServicesAsync(context);
        }

        /// <summary>
        /// 应用程序初始化 前执行
        /// </summary>
        /// <param name="context"></param>
        /// <returns></returns>
        public override async Task OnPreApplicationInitializationAsync(ApplicationInitializationContext context)
        {
            await base.OnPreApplicationInitializationAsync(context);
        }
        /// <summary>
        /// 应用程序初始化
        /// </summary>
        /// <param name="context"></param>
        /// <returns></returns>
        public override async Task OnApplicationInitializationAsync(ApplicationInitializationContext context)
        {
            await base.OnApplicationInitializationAsync(context);

            var app = context.GetApplicationBuilder();

            app.UseCors(policyName);
            #region swagger
            app.UseSwagger();
            app.UseSwaggerUI(option =>
            {
                option.SwaggerEndpoint($"/swagger/v1.0/swagger.json", $"V1.0 Docs");
                option.RoutePrefix = "doc";
                //隐藏模型
                option.DefaultModelsExpandDepth(-1);
                //折叠文档
                //option.DocExpansion(Swashbuckle.AspNetCore.SwaggerUI.DocExpansion.None);
            });
            #endregion

            app.UseUnitOfWork();  //使用此方法会启用 AbpExceptionHandlingMiddleware 中间件

            app.UseApplicationMiddleware();

            app.UseRouting();
            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });

            app.UseWhen(context => context.Request.Path.StartsWithSegments("/File"),
                appBuilder =>
                {
                    appBuilder.Run(async context =>
                    {
                        context.Features.Get<IHttpMaxRequestBodySizeFeature>().MaxRequestBodySize = (long)(2 * System.Math.Pow(1024, 3));
                        await Task.CompletedTask;
                    });
                }
            );

        }
        /// <summary>
        /// 应用程序初始化 后执行
        /// </summary>
        /// <param name="context"></param>
        /// <returns></returns>
        public override async Task OnPostApplicationInitializationAsync(ApplicationInitializationContext context)
        {
            await base.OnPostApplicationInitializationAsync(context);

            IocContext.Set(context.GetApplicationBuilder().ApplicationServices);

            SerilogConfigure.HttpContextAccessor = context.ServiceProvider.GetRequiredService<IHttpContextAccessor>();
            SerilogConfigure.CurrentTenant = context.ServiceProvider.GetRequiredService<ICurrentTenant>();
        }

        /// <summary>
        /// 应用程序关闭
        /// </summary>
        /// <param name="context"></param>
        /// <returns></returns>
        public override async Task OnApplicationShutdownAsync(ApplicationShutdownContext context)
        {
            await base.OnApplicationShutdownAsync(context);
        }

    }
}
